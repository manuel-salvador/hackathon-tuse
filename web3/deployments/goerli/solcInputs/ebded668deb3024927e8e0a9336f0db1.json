{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/TuseDAO.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ncontract TuseDAO {\n    struct Proposal {\n        uint256 id;\n        address proposer;\n        string proposalType;\n        string description;\n        uint256 votesFor;\n        uint256 votesAgainst;\n        bool executed;\n        uint256 endTime;\n    }\n\n    Proposal[] public proposals;\n\n    uint256 public proposalsNumber;\n\n    IERC721 public tuseNFT;\n\n    uint256 public votingDuration;\n\n    mapping (uint256 => mapping (uint256 => bool)) public _hasVoted;\n\n    constructor(address _tuseNFT, uint256 _votingDuration) {\n        tuseNFT = IERC721(_tuseNFT);\n        votingDuration = _votingDuration;\n    }\n\n    function createProposal(\n        string memory _proposalType, \n        string memory _description\n    ) external {\n        uint256 proposalId = proposals.length;\n        uint256 endTime = block.timestamp + votingDuration;\n        proposals.push(Proposal(proposalId, msg.sender, _proposalType, _description, 0, 0, false, endTime));\n        proposalsNumber += 1;\n    }\n\n    function getProposalVotes(uint256 proposalId) external view returns (uint256, uint256) {\n        return (\n            proposals[proposalId].votesFor, \n            proposals[proposalId].votesAgainst\n        );\n    }\n\n    function getProposalExecuted(uint256 proposalId) external view returns (bool) {\n        return proposals[proposalId].executed;\n    }\n\n    function getProposalDescription(uint256 proposalId) external view returns (string memory, string memory) {\n        return (\n            proposals[proposalId].description,\n            proposals[proposalId].proposalType\n        );\n    }\n\n    function getProposalProposer(uint256 proposalId) external view returns (address) {\n        return proposals[proposalId].proposer;\n    }\n\n    function getProposalEndTime(uint256 proposalId) external view returns (uint256) {\n        return proposals[proposalId].endTime;\n    }\n\n    function vote(\n        uint256 _proposalId, \n        uint256[] memory tokenIds\n    ) external {\n        require(_proposalId < proposals.length, \"Invalid proposal ID\");\n        require(tokenIds.length > 0, \"No TuseNFTs to vote with\");\n\n        uint256 votes = tokenIds.length;\n\n        Proposal storage proposal = proposals[_proposalId];\n        require(!proposal.executed, \"Proposal already executed\");\n        require(block.timestamp < proposal.endTime, \"Voting has ended\");\n\n\n        for (uint256 n = 0; n < tokenIds.length; n++) {\n            require(\n                IERC721(tuseNFT).ownerOf(tokenIds[n]) == msg.sender, \n                \"You are not the owner!\"\n            );\n            \n            require(!_hasVoted[_proposalId][tokenIds[n]], \"Already voted!\");\n            _hasVoted[_proposalId][tokenIds[n]] = true;\n        }\n\n        proposal.votesFor += votes;\n    }\n\n    function voteAgainstProposal(\n        uint256 _proposalId, \n        uint256[] memory tokenIds\n    ) external {\n        require(_proposalId < proposals.length, \"Invalid proposal ID\");\n        require(tokenIds.length > 0, \"No TuseNFTs to vote with\");\n\n        uint256 votes = tokenIds.length;\n\n        Proposal storage proposal = proposals[_proposalId];\n        require(!proposal.executed, \"Proposal already executed\");\n        require(block.timestamp < proposal.endTime, \"Voting has ended\");\n\n\n        for (uint256 n = 0; n < tokenIds.length; n++) {\n            require(\n                IERC721(tuseNFT).ownerOf(tokenIds[n]) == msg.sender, \n                \"You are not the owner!\"\n            );\n            \n            require(!_hasVoted[_proposalId][tokenIds[n]], \"Already voted!\");\n            _hasVoted[_proposalId][tokenIds[n]] = true;\n        }\n\n        proposal.votesAgainst += votes;\n    }\n\n    function executeProposal(uint256 _proposalId) external {\n        require(_proposalId < proposals.length, \"Invalid proposal ID\");\n\n        Proposal storage proposal = proposals[_proposalId];\n        require(!proposal.executed, \"Proposal already executed\");\n        require(block.timestamp >= proposal.endTime, \"Voting has not ended yet\");\n        require(proposal.votesFor > proposal.votesAgainst, \"Proposal was not approved by majority\");\n        proposal.executed = true;\n        // Ejecutar la propuesta\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}